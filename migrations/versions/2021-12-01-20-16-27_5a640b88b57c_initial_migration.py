"""Initial migration

Revision ID: 5a640b88b57c
Revises:
Create Date: 2021-12-01 20:16:27.741264

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import uuid

# revision identifiers, used by Alembic.
revision = "5a640b88b57c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deleted_by", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "user_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("user_number", sa.String(length=6), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("user_name", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("email_address", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email_address"),
        sa.UniqueConstraint("phone_number"),
    )
    op.create_table(
        "account",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deleted_by", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "account_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column(
            "user_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("account_balance", sa.Float(), nullable=False),
        sa.Column("account_savings", sa.Float(), nullable=False),
        sa.Column("cash_balance", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
        sa.PrimaryKeyConstraint("account_id"),
    )
    op.create_table(
        "oauth_token",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deleted_by", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "oauth_token_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column(
            "user_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("access_token", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
        sa.PrimaryKeyConstraint("oauth_token_id"),
    )
    op.create_table(
        "account_transaction_category",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deleted_by", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "account_transaction_category_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column(
            "account_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("category_name", sa.String(), nullable=False),
        sa.Column(
            "transaction_type",
            sa.Enum(
                "ACCOUNT_CREDIT",
                "CASH_CREDIT",
                "DEBIT",
                "SAVINGS",
                name="transactiontypeenum",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.account_id"],
        ),
        sa.PrimaryKeyConstraint("account_transaction_category_id"),
    )
    op.create_table(
        "ledger",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deleted_by", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "ledger_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column(
            "account_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column(
            "transaction_category_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column("transaction_cost", sa.Float(), nullable=False),
        sa.Column(
            "source_account",
            sa.Enum(
                "ACCOUNT",
                "SAVINGS_ACCOUNT",
                "EXTERNAL",
                "CASH",
                name="sourceaccountenum",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.account_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_category_id"],
            ["account_transaction_category.account_transaction_category_id"],
        ),
        sa.PrimaryKeyConstraint("ledger_id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("ledger")
    op.drop_table("account_transaction_category")
    op.drop_table("oauth_token")
    op.drop_table("account")
    op.drop_table("user")
    sa.Enum(name="sourceaccountenum").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="transactiontypeenum").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
